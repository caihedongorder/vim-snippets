
#######################################################################
#                          ue4 util snippets                          #
#######################################################################

#################
#  uelog class  #
#################

snippet u.log "" b
UELog.Log(\$"${1}");${0}
endsnippet

snippet u.loge "" b
UELog.LogError(\$"${1}");${0}
endsnippet

snippet u.logw "UELog." b
UELog.LogWarning(\$"${1}");${0}
endsnippet

snippet ctor "构造函数" b
public ${2:`!p snip.rv = snip.basename`}(){

}
endsnippet

global !p
dict_typeInfo = {
	'image' :
		{
			'Prefix' : 'Image_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : True,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'button' :
		{
			'Prefix' : 'Button_',
			'events' : 'OnClicked',
			'events_params' : '',
			'events_returnValues' : 'v',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'slider' :
		{
			'Prefix' : 'Slider_',
			'events' : 'OnValueChanged',
			'events_params' : 'f:value',
			'events_returnValues' : 'v',
			'need_set' : True,
			'set_api' : 'SetValue', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'combo' :
		{
			'Prefix' : 'ComboBoxString_',
			'events' : 'OnGenerateWidgetEvent|OnGenerateContentWidgetEvent',
			'events_params' : 's:option|s:option',
			'events_returnValues' : 'UUserWidget|UUserWidget',
			'need_set' : True,
			'set_api' : 'SetSelectedOption', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'check' :
		{
			'Prefix' : 'CheckBox_',
			'events' : 'OnCheckStateChanged',
			'events_params' : 'b:IsChecked',
			'events_returnValues' : 'v',
			'need_set' : True,
			'set_api' : 'SetIsChecked', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'text' :
		{
			'Prefix' : 'TextBlock_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : True,
			'set_api' : 'SetText', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'progress' :
		{
			'Prefix' : 'ProgressBar_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : True,
			'set_api' : 'SetPercent', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'rich' :
		{
			'Prefix' : 'RichTextBlock_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : True,
			'set_api' : 'SetText', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'canvas' :
		{
			'Prefix' : 'CanvasPanel_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'overlay' :
		{
			'Prefix' : 'Overlay_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'boxh' :
		{
			'Prefix' : 'HorizontalBox_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'boxv' :
		{
			'Prefix' : 'VerticalBox_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'boxs' :
		{
			'Prefix' : 'ScrollBox_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'switcher' :
		{
			'Prefix' : 'WidgetSwitcher_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
	'grid' :
		{
			'Prefix' : 'GridPanel_',
			'events' : '',
			'events_params' : '',
			'events_returnValues' : '',
			'need_set' : False,
			'set_api' : '', # 如果有设置set_api 就会简单生成Set方法,否则需要手动生成set的代码
		},
}

def cs_getAccessString( accessType ):
	if accessType          == "p":
		return "public"
	elif accessType        == "r":
		return "protected"
	elif accessType        == "i":
		return "private"
	return "public"
def cs_getTypePrefix( typeStr ):
	typeInfo = dict_typeInfo.get( typeStr )
	if typeInfo != None:
		return typeInfo['Prefix']
	return typeStr
def cs_gettype( typeStr ):
	if typeStr                == "v":
		return "void"
	elif typeStr              == "b":
		return "bool"
	if typeStr                == "sb":
		return "sbyte"
	elif typeStr              == "by":
		return "byte"
	elif typeStr              == "sh":
		return "short"
	elif typeStr              == "us":
		return "ushort"
	elif typeStr              == "i":
		return "int"
	elif typeStr              == "ui":
		return "uint"
	elif typeStr              == "l":
		return "long"
	elif typeStr              == "ul":
		return "ulong"
	elif typeStr              == "f":
		return "float"
	elif typeStr              == "d":
		return "double"
	elif typeStr              == "s":
		return "string"
	else:
		if isinstance( typeStr,str ) and len( typeStr ) > 1:
			if typeStr[0] == 'l' and typeStr[1] == '.' :
				elemType = cs_gettype( typeStr[2:] )
				return "List<"+ elemType + ">"
			elif typeStr[0] == 'd' and typeStr[1] == '.' :
				keyValueStr = typeStr[ 2: ]
				strkeyElemType,strValueElelType = keyValueStr.split( '.',1 )
				keyElemType = cs_gettype( strkeyElemType )
				valueElemType = cs_gettype( strValueElelType )
				print( keyElemType,valueElemType )
				return "Dictionary< " + keyElemType + " , " + valueElemType + " >"
			else:
				typeInfo = dict_typeInfo.get( typeStr )
				if typeInfo != None:
					fullTypeStr = ('U'+ cs_getTypePrefix( typeStr ) )
					return fullTypeStr[:-1]
	return typeStr

# 获取全局变量名 比如：Image_XXX
def cs_GetWidgetGlobalVariableName( typeStr , valueStr ):
	return cs_getTypePrefix(typeStr) + valueStr
# 获取本地本地变量名 比如: l_Image_XXX
def cs_GetWidgetLocalVariableName( typeStr , valueStr ):
	return 'l_' + cs_GetWidgetGlobalVariableName( typeStr , valueStr )


# 获取控件事件函数名
def cs_GetWidgetEventFunctionName( typeStr , valueStr , eventName ):
	variableName = cs_GetWidgetGlobalVariableName( typeStr , valueStr )
	return variableName + '_' + eventName

# 产生一个增加或者移除事件
def cs_generateAddOrRemoveEvent( typeStr , valueStr , eventName, bAddEvent ):
	identation = '\t\t\t'
	variableName = cs_GetWidgetGlobalVariableName( typeStr , valueStr )
	plugSign = '+' if bAddEvent else '-'
	eventFunctionName = cs_GetWidgetEventFunctionName( typeStr , valueStr , eventName )
	codestr = identation + variableName + '.' + eventName + ' ' + plugSign + '=' + eventFunctionName + ';\n'
	return codestr

# u.class.widget.image.Name.slider.mySlider.progress.myProg
# u.class.widget.progress.myProg
# 产生控件的AddEvent 或者RemoveEvent
def cs_generateWidgetAddOrRemoveEvent( typeStr , valueStr , bAddEvent ):
	codestr = ''
	typeInfo = dict_typeInfo.get(typeStr)
	if typeInfo != None:
		identation = '\t\t\t'
		strEventNames = typeInfo['events']
		if len(strEventNames) > 0:
			eventNameList = strEventNames.split('|')
			for eventName in eventNameList:
				codestr += cs_generateAddOrRemoveEvent( typeStr , valueStr , eventName , bAddEvent  )
	return codestr
	# 产生函数定义
def cs_generateFunctionDefine( accessType , functionName , returnValue , params ):
	strParams  = ''
	if len(params) > 0:
		paramsList = params.split( ';' )
		paramCount = len( paramsList )
		paramIndex = 0
		while paramIndex < paramCount:
			typeNameStr   = paramsList[paramIndex]
			typeNamePairs = typeNameStr.split( ':' )
			typeStr       = typeNamePairs[0]
			NameStr       = typeNamePairs[1]
			strParams    += cs_gettype( typeStr ) + ' ' + NameStr + ' ' + (',' if paramIndex < paramCount - 1 else '')
			paramIndex   += 1
	identation = '\t\t'
	codestr   = identation + cs_getAccessString( accessType ) + ' ' + cs_gettype( returnValue ) + ' ' + functionName + '( ' + strParams + ' )\n'
	codestr   += identation + '{\n'
	codestr   += identation + '}\n'
	return codestr
	# 产生控件的 回调函数
def cs_generateWidgetEventCallBack( typeStr , valueStr ):
	codestr = ''
	typeInfo = dict_typeInfo.get(typeStr)
	if typeInfo != None:
		identation           = '\t\t\t'

		strEventNames        = typeInfo['events']
		if len(strEventNames) > 0:
			strEventParams       = typeInfo['events_params']
			strEventReturnValues = typeInfo['events_returnValues']

			eventNameList        = strEventNames.split('|')
			eventParamsList      = strEventParams.split('|')
			eventReturnValueList = strEventReturnValues.split('|')

			iEvent               = 0
			EventCount           = len(eventNameList)

			while iEvent < EventCount:
				eventName        = eventNameList[iEvent]
				eventParams      = eventParamsList[iEvent]
				eventReturnValue = eventReturnValueList[iEvent]

				eventFunctionName = cs_GetWidgetEventFunctionName( typeStr , valueStr , eventName )
				codestr += cs_generateFunctionDefine( 'i' , eventFunctionName , eventReturnValue , eventParams )
				# Slider_MySlider_OnValueChanged    f:value      v
				# codestr +=   eventFunctionName + '    ' + eventParams + '      '  +  eventReturnValue

				iEvent = iEvent + 1
	return codestr

	# 产生一个控件定义
def cs_generateWidgetDefine( typeStr,valueStr ):
	return '\t\t' + 'private '+ cs_gettype( typeStr ) + ' ' + cs_GetWidgetGlobalVariableName( typeStr,valueStr )  + ';\n'
	# 产生一个控件初始化
def cs_generateWidgetInit( typeStr,valueStr ):
	varName = cs_GetWidgetGlobalVariableName( typeStr,valueStr )
	return '\t\t\t' + varName +' = UObjectUtil.GetProperty<' + cs_gettype( typeStr ) + '>' + '(this, "'+ varName +'");\n'
	# 产生一个控件目标控件Set方法的局部变量 <++++> 用于快速替换
def cs_generateWidgetSetDataLocalVariable(typeStr,valueStr):
	typeInfo = dict_typeInfo.get(typeStr)
	if typeInfo != None:
		bNeedSet = typeInfo['need_set']
		if bNeedSet :
			return '\t\t\t' + 'var ' + cs_GetWidgetLocalVariableName( typeStr , valueStr ) + '= <++++> ;\n'
	return ""

	# 每个控件产生Set 代码
def cs_generateWidgetSetData( typeStr,valueStr ):
	# 跳过黑名单
	codestr  = ''
	typeInfo = dict_typeInfo.get(typeStr)
	if typeInfo != None:
		bNeedSet = typeInfo['need_set']
		if bNeedSet :
			strSetApi = typeInfo['set_api']
			if len(strSetApi) > 0:
				codestr = '\t\t\t' + cs_GetWidgetGlobalVariableName( typeStr,valueStr ) + '.'+ strSetApi +'( ' + cs_GetWidgetLocalVariableName(typeStr , valueStr) + ');\n'
			elif typeStr == 'image':
				# var t_icon = UObjectGlobals.StaticLoadObject(
				#     UTexture2D.StaticClass(), UObjectGlobals.GetTransientPackage(),
				#     characterCfgInfo.head_circle_paths) as UTexture2D;
				# Image_TeamLeaderIcon.SetBrushFromTexture(t_icon, true);
				localIconName = cs_GetWidgetLocalVariableName( typeStr,valueStr ) + '_Icon'
				codestr = '\t\t\t' + 'var ' + localIconName + '= UObjectGlobals.StaticLoadObject( UTexture2D.StaticClass(), UObjectGlobals.GetTransientPackage(),\n'
				codestr += '\t\t\t\t\t\t' + cs_GetWidgetLocalVariableName( typeStr,valueStr ) + ') as UTexture2D;\n';
				codestr += '\t\t\t' + cs_GetWidgetGlobalVariableName( typeStr,valueStr ) + '.SetBrushFromTexture(' + localIconName + ' , true);\n\n'
	return codestr

	# 产生所有控件定义
def cs_generateAllWidgetsDefine( params ):
    # TextBlock_TeamName = UObjectUtil.GetProperty<UTextBlock>(this, "TextBlock_TeamName");
	codestr = "\n"
	paramsList = params.split( '.' )
	paramCount = len( paramsList )
	paramIndex = 0
	while paramIndex + 1 < paramCount:
		typeStr = paramsList[ paramIndex ]
		valueStr = paramsList[ paramIndex+1 ]
		codestr += cs_generateWidgetDefine( typeStr,valueStr )
		paramIndex += 2
	return codestr
	#产生所有控件初始化
def cs_generateAllWidgetsInit( params ):
    # private UImage Image_TacticalPanelBg;
	codestr = "\n"
	paramsList = params.split( '.' )
	paramCount = len( paramsList )
	paramIndex = 0
	while paramIndex + 1 < paramCount:
		typeStr = paramsList[ paramIndex ]
		valueStr = paramsList[ paramIndex+1 ]
		codestr += cs_generateWidgetInit( typeStr,valueStr )
		paramIndex += 2
	return codestr
	#产生所有控件SetData代码
def cs_generateAllWidgetsSetData( params ):
	localInitCodeStr = "\n"
	widgetSetCodeStr = "\n"
	paramsList = params.split( '.' )
	paramCount = len( paramsList )
	paramIndex = 0
	while paramIndex + 1 < paramCount:
		typeStr = paramsList[ paramIndex ]
		valueStr = paramsList[ paramIndex+1 ]
		localInitCodeStr += cs_generateWidgetSetDataLocalVariable( typeStr,valueStr )
		widgetSetCodeStr += cs_generateWidgetSetData( typeStr,valueStr )

		paramIndex += 2
	return localInitCodeStr + '\n' + widgetSetCodeStr

	# 产生所有控件的AddEventListener Or RemoveEventListener
def cs_generateAllWidgetsAddOrRemoveEventListener( params , bAddEvent ):
    # TextBlock_TeamName = UObjectUtil.GetProperty<UTextBlock>(this, "TextBlock_TeamName");
	codestr = "\n"
	paramsList = params.split( '.' )
	paramCount = len( paramsList )
	paramIndex = 0
	while paramIndex + 1 < paramCount:
		typeStr = paramsList[ paramIndex ]
		valueStr = paramsList[ paramIndex + 1 ]
		codestr += cs_generateWidgetAddOrRemoveEvent( typeStr,valueStr,bAddEvent )
		paramIndex += 2
	return codestr

	# 产生所有Widget绑定事件回调函数体
def cs_generateAllWidgetsEventFunctionBody( params ):
    # TextBlock_TeamName = UObjectUtil.GetProperty<UTextBlock>(this, "TextBlock_TeamName");
	codestr = "\n"
	paramsList = params.split( '.' )
	paramCount = len( paramsList )
	paramIndex = 0
	while paramIndex + 1 < paramCount:
		typeStr = paramsList[ paramIndex ]
		valueStr = paramsList[ paramIndex + 1 ]
		codestr += cs_generateWidgetEventCallBack( typeStr,valueStr )
		paramIndex += 2
	return codestr
endglobal

##################
#  ue4 property  #
##################
snippet 'u.prop.(\w+)' "ue4 变量" r
[UE4Property(EPropertyFlags.CPF_Common)]
public `!p snip.rv = cs_gettype(match.group(1))` ${1:propName};
endsnippet

#######################################################################
#                            场景相关对象获取代码片段                 #
#######################################################################

snippet u.battle.team "战斗场景中 队伍管理类" w
var teamMgr = SceneManager.Instance.CurrentScene.TeamManager as TeamManagerInBattleScene;
$0
endsnippet
snippet u.battle.scene "战斗场景中 战斗场景实例" w
var battleScene = SceneManager.Instance.CurrentScene as BattleScene;
$0
endsnippet

snippet u.battle.scene.get "获取战斗场景中的物件" b
var currentScene = SceneManager.Instance.CurrentScene;
var ${1:entity} = currentScene.GetEntity<${2:T}>(${3:entityId}) as $2;
$0
endsnippet

snippet u.battle.util "获取战斗场景实用类" w
BattleScene_Util$0
endsnippet


#################
#  logic class  #
#################

snippet 'uilogic.([\w.]+)' "ue4 logic class" r
#region 模块信息
/*----------------------------------------------------------------
// Copyright (C) `!v strftime("%Y")` gz，netease
//
// u.class.widget.image.MyImage.button.MyButton.combo.MyCombo.check.MyCheckBox.text.MyText.progress.MyProgress.rich.MyRich.canvas.MyCanvas.overlay.Myoverlay.boxh.MyHBox.boxv.MyVBox.boxs.MySbox.switcher.MyWitcher.grid.MyGrid
// 模块名：$1
// 创建者：caihedong
// 创建日期：`!v strftime("%Y-%m-%d")`
// 模块描述：${3:说明}
//----------------------------------------------------------------*/
#endregion
using UnrealEngine.Game.Event;
using UnrealEngine.Game.Scene;
namespace UnrealEngine.Game.UI
{
	public partial class `!p snip.rv = snip.basename` : UILogic
	{
		/// <summary>
		///		界面显示时回调
		/// </summary>
		public override void OnShow(params object[] args)
		{
			base.OnShow(args);
		
			`!p snip.rv = cs_generateAllWidgetsSetData( match.group(1) )`
		}

		/// <summary>
		/// 订阅事件
		/// </summary>
		public override void AddEventListener()
		{
			`!p snip.rv = cs_generateAllWidgetsAddOrRemoveEventListener( match.group(1) , True)`
		}

		/// <summary>
		/// 取消订阅事件
		/// </summary>
		public override void RemoveEventListener()
		{
			`!p snip.rv = cs_generateAllWidgetsAddOrRemoveEventListener( match.group(1) , False)`
		}
		`!p snip.rv = cs_generateAllWidgetsEventFunctionBody( match.group(1) )`
	}
}
endsnippet

#############################
#  ue4 actor class snippet  #
#############################
snippet u.class.normal "普通类" b
#region 模块信息
/*----------------------------------------------------------------
// Copyright (C) `!v strftime("%Y")` gz，netease
// 
// 模块名：$2
// 创建者：caihedong
// 创建日期：`!v strftime("%Y-%m-%d")`
// 模块描述：${3:说明}
//----------------------------------------------------------------*/
#endregion
using UnrealEngine.Game.Event;
using UnrealEngine.Game.Scene;
namespace UnrealEngine.Game${1:.NameSpace}
{
	public class ${2:`!p snip.rv = snip.basename`}
	{
		${0}		
	}
}
endsnippet


#############################
#  ue4 actor class snippet  #
#############################
snippet u.class.normal.logic "普通逻辑类" b
#region 模块信息
/*----------------------------------------------------------------
// Copyright (C) `!v strftime("%Y")` gz，netease
// 
// 模块名：$2
// 创建者：caihedong
// 创建日期：`!v strftime("%Y-%m-%d")`
// 模块描述：${3:说明}
//----------------------------------------------------------------*/
#endregion
using UnrealEngine.Game.Event;
using UnrealEngine.Game.Scene;
namespace UnrealEngine.Game${1:.NameSpace}
{
	public class ${2:`!p snip.rv = snip.basename`}
	{
		/// <summary>
		/// 订阅事件
		/// </summary>
		public void AddEventListener()
		{
			${0}		
		}

		/// <summary>
		/// 取消订阅事件
		/// </summary>
		public void RemoveEventListener()
		{
		}
	}
}
endsnippet

snippet uactor "ue4 actor class" b
#region 模块信息
/*----------------------------------------------------------------
// Copyright (C) `!v strftime("%Y")` gz，netease
// 
// u.class.widget.image.MyImage.button.MyButton.combo.MyCombo.check.MyCheckBox.text.MyText.progress.MyProgress.rich.MyRich.canvas.MyCanvas.overlay.Myoverlay.boxh.MyHBox.boxv.MyVBox.boxs.MySbox.switcher.MyWitcher.grid.MyGrid
// 模块名：$1
// 创建者：caihedong
// 创建日期：`!v strftime("%Y-%m-%d")`
// 模块描述：${2:说明}
//----------------------------------------------------------------*/
#endregion
using UnrealEngine.Game.Event;
using UnrealEngine.Game.Scene;
namespace UnrealEngine.Game
{
	public class A${1:`!p snip.rv = snip.basename`} : AActor
	{
		[UE4Function(EFunctionFlags.FUNC_Common)]
		public virtual void ReceiveBeginPlay()
		{

		}
		[UE4Function(EFunctionFlags.FUNC_Common)]
		void ReceiveEndPlay(EEndPlayReason.Type EndPlayReason)
		{

		}

		//[UE4Function(EFunctionFlags.FUNC_Common)]
		//void ReceiveTick(float DeltaSeconds)
		//{
		//
		//}
		${0}		
	}
}
endsnippet

#######################################################################
#                             Util Class                              #
#######################################################################
snippet u.class.util "util class" b
#region 模块信息
/*----------------------------------------------------------------
// Copyright (C) `!v strftime("%Y")` gz，netease
// 
// u.class.widget.image.MyImage.button.MyButton.combo.MyCombo.check.MyCheckBox.text.MyText.progress.MyProgress.rich.MyRich.canvas.MyCanvas.overlay.Myoverlay.boxh.MyHBox.boxv.MyVBox.boxs.MySbox.switcher.MyWitcher.grid.MyGrid
// 模块名：`!p snip.rv = snip.basename`
// 创建者：caihedong
// 创建日期：`!v strftime("%Y-%m-%d")`
// 模块描述：${2:说明}
//----------------------------------------------------------------*/
#endregion
using UnrealEngine.Game.Event;
using UnrealEngine.Game.Scene;
namespace UnrealEngine.Game.${1:Name}
{
	public class `!p snip.rv = snip.basename`
	{
		${0}		
	}
}
endsnippet


snippet "uwidget.([\w.]+)" "ue4 widget class" r
#region 模块信息
/*----------------------------------------------------------------
// Copyright (C) `!v strftime("%Y")` gz，netease
//
// 模块名：$1
// 创建者：caihedong
// 创建日期：`!v strftime("%Y-%m-%d")`
// 模块描述：${2:说明}
//----------------------------------------------------------------*/
#endregion
using UnrealEngine.Game.Event;
using UnrealEngine.Game.Scene;
namespace UnrealEngine.Game
{
	public class U${1:`!p snip.rv = snip.basename`} : UUserWidget
	{
		`!p snip.rv = cs_generateAllWidgetsDefine( match.group(1) )`

		[UE4Function( EFunctionFlags.FUNC_Common )]
		void Construct()
		{
			`!p snip.rv = cs_generateAllWidgetsInit( match.group(1) )`

			AddEventListener();
		}
		[UE4Function( EFunctionFlags.FUNC_Common )]
		void Destruct()
		{
			RemoveEventListener();	
		}
		public void SetData()
		{
			`!p snip.rv = cs_generateAllWidgetsSetData( match.group(1) )`
		}

		/// <summary>
		/// 订阅事件
		/// </summary>
		private void AddEventListener()
		{
			`!p snip.rv = cs_generateAllWidgetsAddOrRemoveEventListener( match.group(1) , True)`
		}

		/// <summary>
		/// 取消订阅事件
		/// </summary>
		private void RemoveEventListener()
		{
			`!p snip.rv = cs_generateAllWidgetsAddOrRemoveEventListener( match.group(1) , False)`
		}
		`!p snip.rv = cs_generateAllWidgetsEventFunctionBody( match.group(1) )`
	}
}
endsnippet

snippet "ui\.(\w+)" "expand ui type" r
`!p snip.rv = cs_gettype( match.group(1) )`
endsnippet

snippet "ui\.(\w+).def.(\w+)" "expand ui type" r
`!p snip.rv = cs_generateWidgetDefine( match.group(1) , match.group(2) )`
`!p snip.rv = cs_generateWidgetSetDataLocalVariable( match.group(1) , match.group(2) )`
`!p snip.rv = cs_generateWidgetSetData( match.group(1) , match.group(2) )`
`!p snip.rv = cs_generateWidgetAddOrRemoveEvent( match.group(1) , match.group(2) , True)`
`!p snip.rv = cs_generateWidgetAddOrRemoveEvent( match.group(1) , match.group(2) , False)`
`!p snip.rv = cs_generateWidgetEventCallBack( match.group(1) , match.group(2) )`
endsnippet


snippet u.event.add "AddEventListener" b
EventDispatcher.AddEventListener(${1:GameplayEvent}.${2:CameraBeginMove},On$1_$2);
endsnippet

snippet u.event.remove "RemoveEventListener" b
EventDispatcher.RemoveEventListener(${1:GameplayEvent}.${2:CameraBeginMove},On$1_$2);
endsnippet


snippet u.timer.ladd "增加局部定时器" b
TimerHandle TH_${1:Name};
TH_$1 = TimerMgr.Instance.AddLocalTimer(${2:0.01f},${3:false},()=>
{
	$0
});
endsnippet

snippet u.timer.ladd.only "增加局部定时器" b
TimerMgr.Instance.AddLocalTimer(${1:0.01f},${2:false},()=>
{
	$0
});
endsnippet

snippet u.timer.sadd "增加特殊定时器" b
TimerMgr.Instance.AddSpecialTimer(${1:0.01f},()=>
{
	$0
});
endsnippet

snippet u.actor.playerpawn "GetPlayerPawn" b
var ${1:playerpawn} = UGameplayStatics.GetPlayerPawn(${2:SceneManager.Instance.GameIns},0) as APlayerPawn${3:Base};
$0
endsnippet

snippet u.actor.controller "GetPlayerController" b
var ${1:playerController} = UGameplayStatics.GetPlayerController(${2:SceneManager.Instance.GameIns},0) as APlayerController${3:Base};
$0
endsnippet

snippet u.actor.spawn "创建物件" b
${1:actor}.K2_SetActorLocation(${2:loc},false,null,true);$0
endsnippet

snippet u.actor.setloc "设置物件位置" b
${1:actor}.K2_SetActorLocation(${2:loc},false,null,true);$0
endsnippet

snippet u.actor.destroy "删除物件" b
${1:actor}.K2_DestroyActor();
$0
endsnippet

snippet u.actor.event.beginplay "implement actor begin_play event" b
[UE4Function(EFunctionFlags.FUNC_Common)]
public virtual void ReceiveBeginPlay()
{
	$0
}
endsnippet

snippet u.actor.event.endplay "implement actor end_play event" b
[UE4Function(EFunctionFlags.FUNC_Common)]
void ReceiveEndPlay(EEndPlayReason.Type EndPlayReason)
{
	$0
}
endsnippet

snippet u.actor.event.tick "implement actor tick event" b
[UE4Function(EFunctionFlags.FUNC_Common)]
void ReceiveTick(float DeltaSeconds)
{
	$0
}
endsnippet


################
#  UI snippet  #
################
snippet ui.interface.show "显示主界面" b
UIManager.Instance.ShowInterface<${1:`!p snip.rv = snip.basename`}>(${2:Params});
$0
endsnippet

snippet ui.single.show "显示弹出式界面" b
UIManager.Instance.ShowSingletonUI<${1:`!p snip.rv = snip.basename`}>(UILayer.Panel,${2:Params});
$0
endsnippet

snippet ui.single.destroy "销毁主界面" b
UIManager.Instance.DestroySingletonUILogic<${1:`!p snip.rv = snip.basename`}>();
$0
endsnippet
####################
#  table snippets  #
####################

snippet tbu.e "extract a user table" b
var tbu`!p snip.rv = t[1].capitalize()` = ClientMgr.GClient.GameData.Tb_${1:student};
$0
endsnippet

snippet tbu.get "get from a user table" b
var tbu`!p snip.rv = t[1].capitalize()`Info = TableUtil.get_${1:student}(${2:id});
if(tbu`!p snip.rv = t[1].capitalize()`Info != null)
{
	$0
}
endsnippet

snippet tb.e "get from a table" b
var tb`!p snip.rv = t[1].capitalize()`= Tb_cfg_${1:character}.All();
$0
endsnippet

snippet tb.get "get from a table" b
var tb`!p snip.rv = t[1].capitalize()`CfgInfo = Tb_cfg_${1:character}.Get(${2:id});
$0
endsnippet


snippet tb.tryget "get from a table" b
var tb`!p snip.rv = t[1].capitalize()`CfgInfo = Tb_cfg_${1:character}.TryGet(${2:id});
if (tb`!p snip.rv = t[1].capitalize()`CfgInfo != null)
{
	$0
}
endsnippet


snippet "tb.get.([\w_]+)" "快速生成表get接口" r
public static Tb_$1 get_${1:`!p snip.rv = match.group(1)`}(int id)         		
{
	return ClientMgr.GClient.GameData.Tb_$1.Find( x => x.id==id );
}
$0
endsnippet



